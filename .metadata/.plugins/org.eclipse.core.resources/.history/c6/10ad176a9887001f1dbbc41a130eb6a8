package com.prs.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.prs.db.LineItemRepo;
import com.prs.db.RequestRepo;
import com.prs.model.LineItem;
import com.prs.model.Request;

@RestController
@RequestMapping("/api/LineItems")
public class LineItemController {
	@Autowired
	private LineItemRepo lineItemRepo;

	@Autowired
	private RequestRepo requestRepo;

	// Get all LineItems
	@GetMapping("/")
	public List<LineItem> getAllLineItem() {
		return lineItemRepo.findAll();
	}

	// GetById
	@GetMapping("/{id}")
	public Optional<LineItem> getLineItemById(@PathVariable int id) {

		Optional<LineItem> l = lineItemRepo.findById(id);
		if (l.isPresent())
			return l;
		else
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Lineitem not found for id: " + id);

	}

	
	@PostMapping("")
	public ResponseEntity<LineItem> addLineItem(@RequestBody LineItem lineItem){
		//Save the new LineItem
		LineItem savedLineItem = lineItemRepo.save(lineItem);
		
		//Recalculate the total for the associated request
		recalculateRequestTotal(savedLineItem.getRequest().getId());
		
		return new ResponseEntity<>(savedLineItem, HttpStatus.CREATED);
	}
	  
	// Method to recalculate the total cost for the associated request
	private void recalculateRequestTotal(int requestId) {
		
		Optional<request>  =requestRepo.findById(requestId);
		
		
	}
		
	

	
	  
	// put -
	@PutMapping("/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void putLineItem(@PathVariable int id, @RequestBody LineItem lineItem) {

		if (id != lineItem.getId()) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "LineItem id mismatch vs url");
		}
		// If LineItem exists ,update,else not found

		else if (lineItemRepo.existsById(lineItem.getId())) {
			lineItemRepo.save(lineItem);
		} else {

			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "LineItem id mismatch vs URL");

		}
	}

	// delete
	@DeleteMapping("/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void deleteLineItem(@PathVariable int id) {
		if (lineItemRepo.existsById(id)) {
			lineItemRepo.deleteById(id);
		} else {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "LineItem not found for id: " + id);
		}

	}

	// Get LineItems by requestId
	@GetMapping("/lines-for-req/{requestId}")
	public List<LineItem> getLineItemsForRequestId(@PathVariable int requestId) {
		return lineItemRepo.findByRequestId(requestId);
	}
}
