package com.prs.controller;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.prs.db.RequestRepo;
import com.prs.model.Request;

@RestController
@RequestMapping("/api/requests")
public class RequestController {
	@Autowired
	private RequestRepo requestRepo;

	// Get all Requests
	@GetMapping("/")
	public List<Request> getAllRequest() {
		return requestRepo.findAll();
	}

	// GetById -"/api/requests/{id}
	// - return :Request
	@GetMapping("/{id}")
	public Optional<Request> getRequestById(@PathVariable int id) {
		// System.out.println("Fetching product with ID: " + id);
		// Check if Product exists for id
		// if yes,return product
		// if no, return NotFound
		Optional<Request> r = requestRepo.findById(id);
		if (r.isPresent())
			return r;
		else
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Request not found for id: " + id);

	}
	
	
	// post -"/api/requests/" 
		// - return request
		@PostMapping("")
		public Request addRequest(@RequestBody Request request) {
			//Fetch the max request number from the repository
			String maxRequestNumber =requestRepo.findMaxRequestNumber();
			//Set the generated request number and default values
			request.setRequestNumber(incrementRequestNumber(maxRequestNumber));
			request.setStatus("New");
			request.setSubmittedDate(LocalDateTime.now());
			request.setTotal(BigDecimal.ZERO);
			return requestRepo.save(request);
			
		}
		
		private String incrementRequestNumber(String maxReqNbr) {
			
			int nbr= Integer.parseInt(maxReqNbr.substring(7));
			nbr++;
			String dateStr = LocalDate.now().format(DateTimeFormatter.ofPattern("yyMMdd"));
			String nbrStr =String.format("%04d", nbr);
			return maxReqNbr.substring(0, 1) + dateStr +nbrStr;
		}


}
