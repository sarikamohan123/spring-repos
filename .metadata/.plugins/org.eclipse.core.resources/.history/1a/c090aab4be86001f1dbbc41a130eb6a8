package com.prs.controller;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.prs.db.RequestRepo;
import com.prs.model.Request;

@RestController
@RequestMapping("/api/requests")
public class RequestController {
	@Autowired
	private RequestRepo requestRepo;

	// Get all Requests
	@GetMapping("/")
	public List<Request> getAllRequest() {
		return requestRepo.findAll();
	}

	// GetById -"/api/requests/{id}
	// - return :Request
	@GetMapping("/{id}")
	public Optional<Request> getRequestById(@PathVariable int id) {
		// System.out.println("Fetching product with ID: " + id);
		// Check if Product exists for id
		// if yes,return product
		// if no, return NotFound
		Optional<Request> r = requestRepo.findById(id);
		if (r.isPresent())
			return r;
		else
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Request not found for id: " + id);

	}
	
	
	// post -"/api/request/" 
	// - return request
	@PostMapping("")
	public Request addRequest(@RequestBody Request request) {
		request.setStatus("New");
		request.setSubmittedDate(LocalDateTime.now());
		request.setTotal(BigDecimal.ZERO);
		return requestRepo.save(request);
	}
	
	// put -"/api/requests/{id}(request passed in RB)
		// -return :No content
		@PutMapping("/{id}")
		@ResponseStatus(HttpStatus.NO_CONTENT)
		public void putRequest(@PathVariable int id, @RequestBody Request request) {
			// check id passed vs id in instance
			// -BadRequest if not exist

			if (id != request.getId()) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Request id mismatch vs url");
			}
			// If request exists ,update,else not found

			else if (requestRepo.existsById(request.getId())) {
				requestRepo.save(request);
			} else {

				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Request id mismatch vs URL");

			}
		}
		
		
		// delete - "/api/requests/{id}
		// -return -NoContent
		@DeleteMapping("/{id}")
		@ResponseStatus(HttpStatus.NO_CONTENT)
		public void deleteRequest(@PathVariable int id) {
			if (requestRepo.existsById(id)) {
				requestRepo.deleteById(id);
			} else {
				throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Request not found for id: " + id);
			}

		}


}
